############################
### Install Bioconductor ###
############################

###INSTALL Bioconductor

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()

### INSTALL PACKAGES Bioconductor

BiocManager::install(c("edgeR", "limma", "RColorBrewer", "mixOmics", "HTSFilter"))
BiocManager::install("Glimma")
BiocManager::install("gplots")
BiocManager::install("org.Mm.eg.db")
library("edgeR")
library("limma")
library("RColorBrewer")
library("mixOmics")
library("HTSFilter")
library("Glimma")
library("org.Mm.eg.db")
library("gplots")

### SESSION R

setwd("~/DEG_edge_mako")
getwd()

### IMPORTING INPUTFILES
rawCountTable <- read.table("DGE_eye_liver.txt", header=TRUE, sep="\t", row.names=1)
dim (rawCountTable)
sampleInfo <- read.table("design.csv", header=TRUE, sep=",", row.names=1)

sampleInfo

head (rawCountTable)

nrow(rawCountTable)


# CREATING A DGElist DATA OBJECT
dgeFull <- DGEList(rawCountTable, group=sampleInfo$condition)
dgeFull

###############################################
### Data exploration and quality assessment ###
###############################################

### EXTRACT PSEUDO-COUNTS
pseudoCounts <- log2(dgeFull$counts+1)
head(pseudoCounts)

### HISTOGRAM AND BOXPLOT FOR PSEUDO-COUNTS
hist(pseudoCounts[,"LV1_T1"])
hist(pseudoCounts[,"EY1_T6"])
boxplot(pseudoCounts, col="gray", las=3)

### MA-PLOT BETWEEN LIVER AND EYE
par(mfrow=c(1,2))
## LV vs LV
# A values
avalues <- (pseudoCounts[,1] + pseudoCounts[,2])/2
# M values
mvalues <- (pseudoCounts[,1] - pseudoCounts[,2])
plot(avalues, mvalues, xlab="A", ylab="M", pch=19)
abline(h=0, col="red")

## EY vs EY
# A values
avalues <- (pseudoCounts[,4] + pseudoCounts[,5])/2
# M values
mvalues <- (pseudoCounts[,4] - pseudoCounts[,5])
plot(avalues, mvalues, xlab="A", ylab="M", pch=19)
abline(h=0, col="red")

### MDS FOR PSEUDO-COUNTS (using limma package)
plotMDS(pseudoCounts)

### HEATMAP FOR PSEUDO-COUNTS (using mixOmics package)
sampleDists <- as.matrix(dist(t(pseudoCounts)))
sampleDists

### FIGURE HEATMAP
png(filename="pseudo-counts.png", res=600, width = 800, height = 800)
cimColor <- colorRampPalette(rev(brewer.pal(9, "Blues")))(16)
cim(sampleDists, color=cimColor, symkey=FALSE)
dev.off()

#########################################
#### Differential expression analysis ###
#########################################

### REMOVE GENES WITH ZERO COUNTS FOR ALL SAMPLES

dgeFull <- DGEList(dgeFull$counts[apply(dgeFull$counts, 1, sum) != 0, ],
                   group=dgeFull$samples$group)
head(dgeFull$counts)

### ESTIMATE THE NORMALIZATION FACTORS

dgeFull <- calcNormFactors(dgeFull, method="TMM")
dgeFull
dgeFull$samples

#Important: using calcNormFactors does not change the counts: 
#it just updates the column norm.factors in $samples. It is therefore 
#recommanded that you use the same name (dgeFull) to save the result of this function:

head(dgeFull$counts)


### From the normalization factors and the original count table, find the normalized 
#counts and use the log2-transformation to inspect them with boxplots and a MDS. 
#Normalized counts can be extracted from dgeFull using the function cpm:

eff.lib.size <- dgeFull$samples$lib.size*dgeFull$samples$norm.factors
normCounts <- cpm(dgeFull)
pseudoNormCounts <- log2(normCounts + 1)
boxplot(pseudoNormCounts, col="gray", las=3)

### MDS

plotMDS(pseudoNormCounts)

### ESTIMATE COMMON AND TAGWISE DISPERSION

dgeFull <- estimateCommonDisp(dgeFull)
dgeFull <- estimateTagwiseDisp(dgeFull)
dgeFull

### PERFORM AN EXACT TEST FOR THE DIFFERENCE IN EXPRESSION BETWEEN THE TWO CONDICTIONS LIVER AND EYE

dgeTest <- exactTest(dgeFull)
dgeTest

### REMOVE LOW EXPRESSED GENES

filtData <- HTSFilter(dgeFull)$filteredData

dgeTestFilt <- exactTest(filtData)
dgeTestFilt


### PLOT AN HISTOGRAM OF UNADJUSTED P-VALUES

hist(dgeTest$table[,"PValue"], breaks=50)

### PLOT AN HISTOGRAM OF UNADJUSTED P-VALUES AFTER FILTERING

hist(dgeTestFilt$table[,"PValue"], breaks=50)

### EXTRACT A SUMMARY OF THE DIFFERENTIAL EXPRESSION STATISTICS

resNoFilt <- topTags(dgeTest, n=nrow(dgeTest$table))
topTags(resNoFilt)

resFilt <- topTags(dgeTestFilt, n=nrow(dgeTest$table))
topTags(resFilt)

### COMPARE THE NUMBER OF DIFFERENTIALLY EXPRESSED GENES WITH AND WITHOUT FILTERING (RISK: 1%) 

sum((resFilt$table$FDR < 0.01))
    
sum(resNoFilt$table$FDR < 0.01)

### EXTRACT AND SORT DIFFERENTIALLY EXPRESSED GENES
sigDownReg <- resFilt$table[resFilt$table$FDR<0.01,]
sigDownReg <- sigDownReg[order(sigDownReg$logFC),]
head(sigDownReg)

sigUpReg <- sigDownReg[order(sigDownReg$logFC, decreasing=TRUE),]
head(sigUpReg)

#WRITE THE RESULTS IN CSV FILES
write.csv(sigDownReg, file="sigDownReg_mako.csv")
write.csv(sigUpReg, file="sigUpReg_mako.csv")

################################
### Interpreting the results ###
################################

###create a MA plot with 1% differentially expressed genes
### MA-PLOT RED (UP AND DOWN REGULATED) AND BLACK (NON SIG)
tiff(file = "MA_plotmako.tiff", width=5, heigh=5, 
     unit="in",res = 300, compression="lzw")
plotSmear(dgeTestFilt,
          de.tags = rownames(resFilt$table)[which(resFilt$table$FDR<0.01)])
abline(h=c(-5, 0, 5), col=c("black","black","black"), lty=2)
dev.off()

### MA-PLOT BLUE (DOWN REGULATED), BLACK (NON SIG) AND RED (UP REGULATED)
tiff(file = "MA_plotmako1.tiff", width=10, heigh=10, 
     unit="in",res = 600, compression="lzw")
plotMD (dgeTestFilt)
abline(h=c(-5, 0, 5), col=c("black","black","black"), lty=2)
dev.off()

### create a Volcano plot
volcanoData = data.frame(logFC = resFilt$table[, 1], negLogPval = -log10(resFilt$table[, 3]))
head(volcanoData)

### VOLCANO PLOT ENTIRELY BLACK
par(mar = c(5, 4, 4, 4))
plot(volcanoData, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change),
     ylab = expression(-log[10]~pvalue))

## VOLCANO PLOT SELECTING INTEREST GENES

lfc = 2
pval = 0.01

signGenes = (abs(volcanoData$logFC) > lfc & volcanoData$negLogPval > -log10(pval))

#VOLCANO PLOT CUSTOMIZED, BLUE (UP AND DOWN REGULATED GENES)
tiff(file = "volcanoplotmako.tiff", width=10, heigh=10, 
     unit="in",res = 600, compression="lzw")
points(volcanoData[signGenes, ], pch = 16, cex = 0.8, col = "darkblue")
abline(h = -log10(pval), col = "grey", lty = 2)
abline(v = c(-lfc, lfc), col = "grey", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc),
      cex = 0.8, line = 0.5)
dev.off()

### TRANSFORM THE NORMALIZED COUNTS IN LOG-COUNTS-PER-MILLION
y <- cpm(dgeFull, log=TRUE, prior.count = 1)
head (y)

### SELECT 1% DIFFERENTIALLY EXPRESSED GENES AND PRODUCE A HEATMAP
selY <- y[rownames(resFilt$table)[resFilt$table$FDR<0.01 & 
                                    abs(resFilt$table$logFC)>1.5],]
head(selY)

### HEATMAP OF ALL 1% DEG 
tiff(file = "all_mako.tiff", width=10, heigh=10, 
     unit="in",res = 600, compression="lzw")
cimColor <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255) [255:1]
finalHM <- cim(t(selY), color=cimColor, symkey=FALSE)
dev.off()

#############################################
### Hierarchical clustering with heatmaps ###
#############################################

### THIS PART IS ABOUT TO SELECT THE 100 (OR MORE OR LESS) MORE DIFFERENTIALLY EXPRESSED GENES (OR TRANSCRIPTS)

### ESTIMATE THE VARIANCE FOR EACH ROW IN THE LOGCOUNTS (SELY) MATRIX

var_genes <- apply(selY, 1, var)
head(var_genes)

### GET THE GENE (TRANSCRIPTS) NAMES FOR THE TOP 10 MOST VARIABLE GENES (TRANSCRIPTS)

select_var_20 <- names(sort(var_genes, decreasing=TRUE))[1:20]
head(select_var_20)

### GET THE GENE (TRANSCRIPTS) NAMES FOR THE TOP 100 MOST VARIABLE GENES (TRANSCRIPTS)

select_var <- names(sort(var_genes, decreasing=TRUE))[1:100]
head(select_var)

### SUBSET LOGCOUNTS MATRIX (SELY)

highly_variable_lcpm <- selY[select_var_20,]

dim(highly_variable_lcpm)

head(highly_variable_lcpm)

### HEATMAP OF THE 100 MOST DEG (COLOUR BLUE AND ORANGE)

mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[sampleInfo$condition]

heatmap.2(highly_variable_lcpm,col=rev(morecols(50)),
          trace="none", ColSideColors=col.cell,scale="row")

### HEATMAP CUSTOMIZED (BLUE)

tiff(file = "20_most_heatmap_mako.tiff", width=10, heigh=10, 
     unit="in",res = 600, compression="lzw")
cimColor <- colorRampPalette(rev(brewer.pal(9, "Blues")))(20)[20:1]
cemmosthighly_variable <- cim(t(highly_variable_lcpm), color=cimColor, symkey=FALSE)
dev.off()

### WRITE THE RESULTS OF THE 100 MOST DEG in csv files
write.csv(selY, file="ALL_differentially_expressed_genes_mako.csv")

write.csv(highly_variable_lcpm, file="100_mosthighlyDG_mako.csv")

### if you are interesting in the result of the gene clustering, it can be obtained from 
#the previous command. More precisely, the result of HAC is stored into $ddc which can be
#plotted as shown below:
plot(finalHM$ddc, leaflab="none")
abline(h=30, lwd=2, col="red")


### Using this dendrogram, we might want to cut the tree at level h=10
#(for instance), which can be performed using the function cutree, which will 
#provide a cluster membership for each gene.

geneClust <- cutree(as.hclust(finalHM$ddc), h=30)
head(geneClust)

#For instance, the number of clusters is equal to
length(unique(geneClust))

#and the genes in cluster 1 are:
names(which(geneClust==1))
summary (geneClust==1)
summary (geneClust==2)
summary (geneClust==3)

#########################################################
### Select fasta sequences of the DEGs (program: BFG) ###
#########################################################

a - Use BFG program to get Trinity sequences (de novo transcriptome reference) from a ID-list.txt
BFG GitLab https://gitlab.com/fethalen/bfg
b - ./bfg -f ID_SNP.txt teste_seq.fasta

###################
### Annoatation ###
###################

#####################################################
### Change .fa for .pep - (program: TRANSDECODER) ###
#####################################################

>labpc6c@labpc6c:~/Documents/Rodrigo/TransDecoder-TransDecoder-v5.5.0$ TransDecoder.LongOrfs -t /home/labpc6c/Documents/Rodrigo/100_DEG_mako_sequence.fas/100_DEG_mako.fasta

####################################
### Annotation (program: BLASTp) ###
####################################

>labpc6c@labpc6c:~/Documents/Rodrigo/uniprot$ blastp -query /home/labpc6c/Documents/Rodrigo/TransDecoder-TransDecoder-v5.5.0/100_DEG_sequences.fas.transdecoder_dir/100_DEG_longest_orfs.pep -db uniprot_sprot_db.fasta -max_target_seqs 1 -outfmt 6 -evalue 1e-5 -num_threads 25 > /home/labpc6c/Documents/Rodrigo/anotacao/blastp_mako_eye.outfmt6

########################################
### Gene ontology (program: PANTHER) ###
########################################

https://www.pantherdb.org
